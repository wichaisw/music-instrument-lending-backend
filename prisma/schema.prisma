generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id(map: "PK_User") @default(autoincrement())
  firstName    String       @db.NVarChar(100)
  lastName     String       @db.NVarChar(100)
  dateOfBirth DateTime?
  address       String?
  phoneNumber  String       @db.NVarChar(20)
  userLevel    Int          @default(0, map: "DF_User_userLevel")
  point         Int          @default(0, map: "DF_User_point")
  createdAt    DateTime?
  createdBy    Int?
  updatedAt    DateTime?
  updatedBy    Int?
  instruments   Instrument[]
  reviews       Review[]
  transactions  BorrowingTransaction[]
  roles         UserRole[]
}

model Instrument {
  id          Int     @id(map: "PK_Instrument") @default(autoincrement())
  type        String  @db.NVarChar(50)
  price       Decimal @db.Decimal(10, 2)
  name        String  @db.NVarChar(200)
  brand       String  @db.NVarChar(50)
  info        String  @db.NVarChar(1000)
  status      String  @default("available", map: "DF_Instrument_status") @db.NVarChar(50)
  createdAt  DateTime?
  createdBy  Int?
  updatedAt  DateTime?
  updatedBy  Int?
  userId     Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
  productImages ProductImage[]
  reviews     Review[]
}

model ProductImage {
  id          Int     @id(map: "PK_ProductImage") @default(autoincrement())
  imageUrl    String  @db.NVarChar(1000)
  createdAt  DateTime?
  createdBy  Int?
  updatedAt  DateTime?
  updatedBy  Int?
  instrumentId Int   
  instrument  Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
}

model BorrowingTransaction {
  id           Int       @id(map: "PK_BorrowingTransaction") @default(autoincrement())
  isLost      Boolean   @default(false, map: "DF_borrowing_transaction_is_lost")
  price        Decimal   @db.Decimal(10, 2)
  date         DateTime
  overdue_date DateTime?
  defectImage String?   @db.NVarChar(500)
  defectText  String?   @db.NVarChar(Max)
  createdAt   DateTime?
  createdBy   Int?
  updatedAt   DateTime?
  updatedBy   Int?
  userId      Int
  user         User    @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Review {
  id         Int       @id(map: "PK_Review") @default(autoincrement())
  star       Int
  text       String?   @db.NVarChar(Max)
  imageUrl  String?   @db.NVarChar(500)
  videoUrl  String?   @db.NVarChar(500)
  createdAt DateTime?
  createdBy Int?
  updatedAt DateTime?
  updatedBy Int?
  userId    Int
  user       User    @relation(fields: [userId], references: [id], onUpdate: NoAction)
  instrumentId Int
  instrument    Instrument @relation(fields: [instrumentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Role {
  id          Int     @id(map: "PK_Role") @default(autoincrement())
  name        String? @db.NVarChar(50)
  createdAt  DateTime?
  createdBy  Int?
  updatedAt  DateTime?
  updatedBy  Int?
  users       UserRole[]
}

model UserRole {
  userId     Int
  user        User  @relation(fields: [userId], references: [id])
  roleId     Int
  role        Role  @relation(fields: [roleId], references: [id])
  createdAt  DateTime?
  createdBy  Int?
  updatedAt  DateTime?
  updatedBy  Int?

  @@id([userId, roleId])
}